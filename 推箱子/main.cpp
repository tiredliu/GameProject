#include<iostream>
#include<conio.h>
#include<windows.h>

using namespace std;
//推箱子
int main()
{
	//重新加载主题
	int RestartThemeNum = 0; 
	//重新加载关卡
	int RestartLevelNum = 0;
	//进入游戏
	bool Game = false;
	while (true)
	{
		//主菜单
		cout << "           主菜单" << endl;
		cout << "输入1进入游戏，输入0退出游戏" << endl;
		//操作输入（阻塞）
		char MenuInput = _getch();
		switch (MenuInput)
		{
		case '0':
			break;
		case '1':
			Game = true;
		}
		//系统命令清屏
		system("CLS");
		//地图
		//0空地，1墙，2玩家，3箱子，4成功点
		int GameMap[2][3][20][20] =
		{ { {
			{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 1, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 },
			{ 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1 },
			{ 1, 4, 1, 0, 1, 0, 0, 0, 0, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 1, 2, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
			{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
			},
			{
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 1, 4, 4, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 1, 4, 4, 1, 0, 0, 3, 3, 3, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
			},
			{
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
			} },
			{
				{
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
				},
				{
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
				},
				{
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
					{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
				} } };

		//主题
		int ThemeNum = RestartThemeNum;
		//关卡
		int LevelNum = RestartLevelNum;
		//若重新开始,则地图下标更新


		//玩家坐标(行、列)
		int PosX, PosY;
		/*操作数组需要处理Step越界，保证只用三次*/
		//玩家操作存储（第几步|该步的0:主题、1:关卡、2:X,3:Y偏移量,4:箱子是否移动）
		int Operate[10000][3] = {};
		//操作步
		int Step = 0;
		//当前可撤销次数
		int CancelTime = 0;
		//重新开始
		bool Restart = false;
		//返回主菜单
		bool ReturnMenu = false;
		

		//游戏
		while (Game)
		{
			cout << "            当前主题 " << ThemeNum + 1 << " 关卡 " << LevelNum + 1 << endl;
			//该关此时成功点剩余数量
			int LevelFinish = 0;
			//打印地图
			for (int i = 0; i <= 19; i++)
			{
				for (int j = 0; j <= 19; j++)
				{
					switch (GameMap[ThemeNum][LevelNum][i][j])
					{
						//空地
					case 0:
						cout << "  ";
						break;

						//墙
					case 1:
						if (ThemeNum == 0)
						{
							//绿蓝
							SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_BLUE);
						}
						else
						{
							//绿色
							SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN);
						}
						cout << "■";
						break;

						//玩家
					case 6://玩家+成功点
						//成功点剩余数量
						++LevelFinish;
					case 2:
						if (GameMap[ThemeNum][LevelNum][i][j] == 2)//玩家
						{
							//蓝
							SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE);
						}
						else//玩家+成功点
						{
							//红色
							SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_RED);
						}
						cout << "の";
						//获取玩家坐标(行、列)
						PosX = i, PosY = j;
						break;

						//箱子
					case 7://箱子+成功点
						//红色
						SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_RED);
						cout << "■";
						//遍历成功点+1
						break;
					case 3://箱子
						//绿色
						SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN);
						cout << "□";
						break;

						//成功点
					case 4:
						//成功点剩余数量
						++LevelFinish;
						//白色
						SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_RED);
						cout << "◇";
						break;
					}
				}
				cout << endl;
			}
			//还原默认颜色
			SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);

			//1行
			cout << "ESC退出 " << " R重玩一次" << " Z撤销该步"<<endl;
			//2行
			cout << "   W  前" << "        可以撤销 ";
			//绿色
			SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN);
			cout << CancelTime;
			//还原默认颜色
			SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);
			cout << " 步" << endl;
			//3行
			cout << "A  S  D" << endl;
			//4行
			cout << "前 后 左" << endl;


			//关卡通关（成功点4、6数量为零）|切换关卡
			if (LevelFinish == 0)
			{
				//切换主题、关卡都需要把操作数组清零Operate[4][3]
				for (int i = 0; i <10000; ++i)
				{
					for (int j = 0; j < 3; ++j)
					{
						Operate[i][j] = 0;
					}
				}
				//撤销次数清零
				CancelTime = 0;
				cout << "通关，进入下一关" << endl;
				//关卡数量过少（暂时循环制）
				++LevelNum;
				//全部通关，切换主题
				if (LevelNum == 4)
				{
					//主题+1
					++ThemeNum;
					//关卡置0
					LevelNum = 0;
				}
				//系统命令清屏
				system("CLS");
				continue;
			}

			//操作输入（阻塞）
			char Input = _getch();
			//系统命令清屏
			system("CLS");
			//行、列坐标偏移量
			int OffSetX = 0, OffSetY = 0;

			//移动逻辑
			switch (Input)
			{
				//向前
			case 'w':
			case 'W':
				OffSetX = -1;
				break;

				//向后
			case 's':
			case 'S':
				OffSetX = 1;
				break;

				//向左
			case 'a':
			case 'A':
				OffSetY = -1;
				break;

				//向右
			case 'd':
			case 'D':
				OffSetY = 1;
				break;

				//撤销
			case 'z':
			case 'Z':
				//切换主题、关卡都需要数组清零
				if (Step > 0 && CancelTime>0)
				{
					//只有玩家移动
					if (Operate[Step][2] != 1)
					{
						//出去 当前玩家位置
						GameMap[ThemeNum][LevelNum][PosX][PosY] -= 2;
						//进入 玩家上一个位置
						GameMap[ThemeNum][LevelNum][PosX - Operate[Step][0]][PosY - Operate[Step][1]] += 2;
						/*跳出开关后
						下面移动语句因为位置改换而玩家坐标未修改（需要打印地图时才会修改）
						，则导致移动逻辑会执行则Step+1，故此此处改写坐标*/
						//修改玩家坐标
						PosX = PosX - Operate[Step][0], PosY = PosY - Operate[Step][1];

						//偏移量记录清除
						Operate[Step][0] = 0, Operate[Step][1] = 0;
						//箱子移动记录清除（默认为0）
						Operate[Step][2] = 0;
						//操作步释放
						--Step;
						//可撤销次数-1
						--CancelTime;
						break;
					}
					//玩家、箱子移动
					else
					{
						//箱子进入，玩家出去 当前玩家位置
						GameMap[ThemeNum][LevelNum][PosX][PosY] += (3 - 2);
						//箱子出去 当前箱子位置
						GameMap[ThemeNum][LevelNum][PosX + Operate[Step][0]][PosY + Operate[Step][1]] -= 3;
						//玩家进入 玩家上一个位置
						GameMap[ThemeNum][LevelNum][PosX - Operate[Step][0]][PosY - Operate[Step][1]] += 2;
						//修改玩家坐标
						PosX = PosX - Operate[Step][0], PosY = PosY - Operate[Step][1];

						//偏移量记录清除
						Operate[Step][0] = 0, Operate[Step][1] = 0;
						//箱子移动记录清除（默认为0）
						Operate[Step][2] = 0;
						//操作步释放
						--Step;
						//可撤销次数-1
						--CancelTime;
						break;
					}
				}
				break;

				//重新开始本关
			case 'r':
			case 'R':
				Restart = true;
				//保存当前主题、关卡
				RestartThemeNum = ThemeNum;
				RestartLevelNum = LevelNum;
				break;

				//返回主菜单(ESC键)
			case 27:
				ReturnMenu = true;
				break;
			}
			

			//重新开始本关卡
			if (Restart)
			{
				//跳出并重新开始加载地图数据
				break;
			}
			//返回主菜单
			if (ReturnMenu)
			{
				//地图数据清零
				RestartThemeNum = 0;
				RestartLevelNum = 0;
				break;
			}


			//移动判断逻辑
			//玩家向【空地】或者【成功点】移动
			if (0 == GameMap[ThemeNum][LevelNum][PosX + OffSetX][PosY + OffSetY] || 4 == GameMap[ThemeNum][LevelNum][PosX + OffSetX][PosY + OffSetY])
			{
				//玩家位置
				//进入下一个位置
				GameMap[ThemeNum][LevelNum][PosX + OffSetX][PosY + OffSetY] += 2;
				//出去当前位置
				GameMap[ThemeNum][LevelNum][PosX][PosY] -= 2;

				//操作次数+1
				++Step;
				//偏移量记录
				Operate[Step][0] = OffSetX, Operate[Step][1] = OffSetY;
				//箱子移动记录（默认为0）
				Operate[Step][2] = 0;
				//可撤销次数+1
				if (CancelTime < 3)
				{
					++CancelTime;
				}
			}
			//玩家推【箱子】（两种情况：空地+箱子 或者 成功点+箱子）
			else if (3 == GameMap[ThemeNum][LevelNum][PosX + OffSetX][PosY + OffSetY] || 7 == GameMap[ThemeNum][LevelNum][PosX + OffSetX][PosY + OffSetY])
			{
				//箱子下一处位置（两种情况：空地 或者 成功点）
				if (0 == GameMap[ThemeNum][LevelNum][PosX + OffSetX * 2][PosY + OffSetY * 2] || 4 == GameMap[ThemeNum][LevelNum][PosX + OffSetX * 2][PosY + OffSetY * 2])
				{
					//箱子出去，玩家进入
					GameMap[ThemeNum][LevelNum][PosX + OffSetX][PosY + OffSetY] += (-3 + 2);
					//箱子进入下一个位置
					GameMap[ThemeNum][LevelNum][PosX + OffSetX * 2][PosY + OffSetY * 2] += 3;
					//玩家出去当前位置
					GameMap[ThemeNum][LevelNum][PosX][PosY] -= 2;

					//操作次数+1
					++Step;
					//偏移量记录
					Operate[Step][0] = OffSetX, Operate[Step][1] = OffSetY;
					//箱子移动记录
					Operate[Step][2] = 1;
					//可撤销次数+1
					if (CancelTime < 3)
					{
						++CancelTime;
					}
				}
			}
		}//游戏
		//重新开始本关卡
		if (Restart == true)
		{
			//跳出并重新开始加载地图数据
			continue;
		}
	}//主菜单
	return 0;
}